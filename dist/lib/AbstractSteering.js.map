{"version":3,"sources":["../../src/lib/AbstractSteering.js"],"names":[],"mappings":"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","file":"AbstractSteering.js","sourcesContent":["import robot from 'robotjs';\n\nexport default class AbstractSteering {\n  constructor(left, right, options = {}) {\n    if(left === undefined || right === undefined) {\n      throw new Error('Left and right turn keys needs to be specified');\n    } \n    this._leftKey = left;\n    this._rightKey = right;\n\n    this.keypressDuration = options.keypressDuration || 40;\n    this.turn = options.turn || this.turn;\n    this.keyPress = options.keyPress || this.keyPress;\n    this.keyToggle = options.keyToggle || robot.keyToggle;\n\n    this.calibratePosThreshold = 2;\n    this.calibrateDirectionThreshold = 0.02;\n    this.calibrateRollThreshold = 0.02;\n    this.zero = 0;\n    this.stableFrameCount = 0;\n    this.stableFramesRequired = 25;\n    this.block = false;\n\n    //Bind class functions to the prototype of this class.\n    this.turn = this.turn.bind(this);\n    this.keyPress = this.keyPress.bind(this);\n    this.left = this.left.bind(this);\n    this.right = this.right.bind(this);\n    this.calibrateHand = this.calibrateHand.bind(this);\n\n\n  }\n\n  turn() {\n    throw new Error('The turn function needs to be implemented.');\n  }\n\n  left() {\n    return this._leftKey;\n  }\n\n  right() {\n    return this._rightKey;\n  }\n\n  calibrateHand(frame, cb) {\n    \n    if (frame.hands.length > 0) {\n      //If a stable frame already as been captured.\n      if(this.stableFrame) {\n\n        let zero = {\n          palmPosition: this.stableFrame.hands[0].palmPosition,\n          handDirection: this.stableFrame.hands[0].direction,\n          roll: this.stableFrame.hands[0].roll(),\n          stableFrame: this.stableFrame\n        }\n        //Return with the callback.\n        return cb(frame, zero);\n      }\n\n      //Get the palm position from the frame\n      let pos = frame.hands[0].palmPosition,\n          \n      //Get the direction of the hand from the frame\n          dir = frame.hands[0].direction,\n\n      //Get the last known position of the hand\n          lastPos = this.lastPosition  || [Infinity, Infinity, Infinity],\n          \n          lastDir = this.lastDirection || [Infinity, Infinity, Infinity],\n\n      //Retrieve the thresholds\n          posThresh = this.calibratePosThreshold,\n          dirThresh = this.calibrateDirectionThreshold,\n\n      //Check if the palm position is stable\n          stablePos = pos.every((dim, i) => (dim >= lastPos[i] - posThresh && dim <= lastPos[i] + posThresh)),\n      //Check if the direction of the hand is stable\n          stableDir = dir.every((dim, i) => (dim >= lastDir[i] - dirThresh && dim <= lastDir[i] + dirThresh));\n\n      if (stablePos && stableDir) {\n        //Count the number of frames with a stable hand\n        console.log(this.stableFrameCount);\n        this.stableFrameCount++;\n      } else {\n        //Restart counting\n        this.stableFrameCount = 0;\n      }\n\n      //If the number of stable frames have met the requirement.\n      if (this.stableFrameCount === this.stableFramesRequired) {\n        //Save the stable frame to use as reference.\n        this.stableFrame = frame;\n\n        robot.keyToggle('up', 'down');\n\n        console.log(\"Stable!\");\n      }\n\n      this.lastPosition = pos;\n      this.lastDirection = dir;\n\n    //If the hand is lost, reset the stable hand positions\n    } else {\n      this.stableFrameCount = 0;\n      this.stableFrame = null\n    }\n\n  }\n\n  block(value) {\n    this.block = value;\n  }\n\n  keyPress(key, block, cb) {\n\n    //If block parameter is omitted.\n    if(typeof block === 'function' && cb === undefined) {\n      cb = block;\n      block = undefined;\n    }\n\n    //console.log(\"Blocking: \" + block);\n\n    //console.log(block);\n\n    let keyToggle = block === false || block === undefined ? this.keyToggle : () => {};\n\n    //let keyToggle = this.keyToggle;\n\n    //console.log(keyToggle);\n\n    keyToggle(key, 'down');\n    //console.log(\"Pressing down %s\", key);\n\n    setTimeout(() => {\n          //console.log(\"Realising %s\", key);\n          keyToggle(key, 'up');\n          cb();\n      }, this.keypressDuration);\n  }\n}"]}